DROP TABLE IF EXISTS POINTGPS CASCADE;
CREATE TABLE POINTGPS ( -- level 0
id_point SERIAL PRIMARY KEY,
latitude FLOAT NOT NULL,
longitude FLOAT NOT NULL
);

DROP TABLE IF EXISTS UTILISATEUR CASCADE;
CREATE TABLE UTILISATEUR ( -- level 0
id_user SERIAL PRIMARY KEY,
user_name VARCHAR(20) NOT NULL,
user_mail VARCHAR(20) NOT NULL UNIQUE,
user_password VARCHAR(20) NOT NULL,
user_role VARCHAR(20) NOT NULL,
user_status BOOLEAN NOT NULL
);

DROP TABLE IF EXISTS POLYGON CASCADE;
CREATE TABLE POLYGON ( -- level 1
id_polygon SERIAL PRIMARY KEY,
poly_name VARCHAR(20) NOT NULL,
poly_description VARCHAR(100),
id_creator SERIAL,
CONSTRAINT fk_polygon
  FOREIGN KEY(id_creator)
	REFERENCES UTILISATEUR(id_user)
);

DROP TABLE IF EXISTS POI CASCADE;
CREATE TABLE POI (	-- level 1
id_poi SERIAL PRIMARY KEY,
type_poi VARCHAR(20) NOT NULL,
is_valid BOOLEAN NOT NULL,
id_point SERIAL,
CONSTRAINT fk_poi_1
  FOREIGN KEY(id_point)
	REFERENCES POINTGPS(id_point),
id_creator SERIAL,
CONSTRAINT fk_poi_2
  FOREIGN KEY(id_creator)
	REFERENCES UTILISATEUR(id_user),
id_validator INT DEFAULT NULL,
CONSTRAINT fk_poi_3
  FOREIGN KEY(id_validator)
	REFERENCES UTILISATEUR(id_user)
);

DROP TABLE IF EXISTS POINT_DE_CHARGE CASCADE;
CREATE TABLE POINT_DE_CHARGE ( -- level 2
type_charge VARCHAR(6) NOT NULL,
has_pump BOOLEAN NOT NULL,
id_poi SERIAL,
CONSTRAINT fk_pdc
  FOREIGN KEY(id_poi)
	REFERENCES POI(id_poi)
);

DROP TABLE IF EXISTS DEMANDES CASCADE;
CREATE TABLE DEMANDES ( -- level 2
id_poi SERIAL, --FK
id_user SERIAL, --FK
type_poi VARCHAR(20) NOT NULL,
id_point SERIAL, --FK
date DATE NOT NULL,
CONSTRAINT fk_demande_1
  FOREIGN KEY(id_poi)
	REFERENCES POI(id_poi),
CONSTRAINT fk_demande_2
  FOREIGN KEY(id_user)
	REFERENCES UTILISATEUR(id_user),
CONSTRAINT fk_demande_3
  FOREIGN KEY(id_point)
	REFERENCES POINTGPS(id_point)
);


